import asyncio
import random

from pyrogram import Client
from pyrogram.errors import FloodWait, MessageIdInvalid
from pyrogram.types import Message


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø {media_group_id: {"messages": [...], "task": Task}}
media_groups_buffer = {}


async def fallback_copy(client: Client, message: Message, dest_chat_id, prefix: str):
    """
    –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ (forward) –Ω–µ —É–¥–∞–ª–∞—Å—å.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (copy_media_group).
    """
    try:
        # –ï—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å media_group_id, –ø—Ä–æ–±—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –∞–ª—å–±–æ–º
        if message.media_group_id is not None:
            try:
                await client.copy_media_group(
                    chat_id=dest_chat_id,
                    from_chat_id=message.chat.id,
                    message_id=message.id,
                )
                print(f"[fallback_copy] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ {dest_chat_id}")
                return
            except Exception as e:
                print(f"[fallback_copy] –û—à–∏–±–∫–∞ –ø—Ä–∏ copy_media_group: {e}")
                # –ï—Å–ª–∏ copy_media_group –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ copy_media_group –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å)
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º caption, –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö - —Ç–µ–∫—Å—Ç
        # –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if message.media:
            # –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
            new_caption = prefix + (message.caption or "")
            await client.copy_message(
                chat_id=dest_chat_id,
                from_chat_id=message.chat.id,
                message_id=message.id,
                caption=new_caption,
            )
        elif message.text:
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message –≤–º–µ—Å—Ç–æ copy
            new_text = prefix + message.text
            await client.send_message(chat_id=dest_chat_id, text=new_text)
        else:
            # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            await client.copy_message(
                chat_id=dest_chat_id,
                from_chat_id=message.chat.id,
                message_id=message.id,
            )

        print(
            f"[fallback_copy] –°–æ–æ–±—â–µ–Ω–∏–µ(—è) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {dest_chat_id} (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)."
        )

    except Exception as e:
        print(f"[fallback_copy] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {dest_chat_id}: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(
            f"[fallback_copy] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {'media' if message.media else 'text'}, "
            f"media_group_id: {message.media_group_id}, "
            f"text: {bool(message.text)}, caption: {bool(message.caption)}"
        )

        # –ï—â–µ –æ–¥–∏–Ω –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
        try:
            content = (
                message.text or message.caption or "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            )
            await client.send_message(
                chat_id=dest_chat_id, text=f"{prefix}\n\n{content}"
            )
            print(
                f"[fallback_copy] –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {dest_chat_id}"
            )
        except Exception as final_e:
            print(
                f"[fallback_copy] –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {dest_chat_id}: {final_e}"
            )


async def process_media_group_with_delay(
    client: Client,
    mg_id: str,
    source_chat_id: int,
    prefix: str,
    delay: float = 1.0,
):
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: –∂–¥—ë–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    –≤–µ—Å—å –∞–ª—å–±–æ–º ¬´–æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º¬ª (forward_messages) –≤–æ –≤—Å–µ —á–∞—Ç—ã –∏–∑ FORWARDING_CONFIG.
    """
    from ..app import FORWARDING_CONFIG

    await asyncio.sleep(delay)

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
    group_data = media_groups_buffer.pop(mg_id, None)
    if not group_data:
        return  # –ö—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–±—Ä–∞–ª –∏–ª–∏ –æ—á–∏—Å—Ç–∏–ª

    messages = group_data["messages"]
    if not messages:
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    messages.sort(key=lambda m: m.id)

    # –í—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
    message_ids = [m.id for m in messages]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–∏–µ —á–∞—Ç—ã –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å
    if source_chat_id not in FORWARDING_CONFIG:
        # –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞
        return
    dest_chat_ids = set(FORWARDING_CONFIG[source_chat_id])

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–ª—å–±–æ–º –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
    first_forwarded = False
    for dest_chat_id in dest_chat_ids:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 1-3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π
        if first_forwarded:
            delay_seconds = random.randint(1, 3)
            print(
                f"–û–∂–∏–¥–∞–Ω–∏–µ {delay_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {mg_id} –≤ {dest_chat_id}..."
            )
            await asyncio.sleep(delay_seconds)

        try:
            await client.forward_messages(
                chat_id=dest_chat_id,
                from_chat_id=source_chat_id,
                message_ids=message_ids,
            )
            print(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {mg_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º –≤ {dest_chat_id}.")
            first_forwarded = True
        except FloodWait as fw:
            print(
                f"FloodWait –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {mg_id} -> {dest_chat_id}: –∂–¥—ë–º {fw.value} —Å–µ–∫—É–Ω–¥."
            )
            await asyncio.sleep(fw.value)
            try:
                await client.forward_messages(
                    chat_id=dest_chat_id,
                    from_chat_id=source_chat_id,
                    message_ids=message_ids,
                )
                print(
                    f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {mg_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ {dest_chat_id} (–ø–æ—Å–ª–µ FloodWait)."
                )
                first_forwarded = True
            except Exception as e:
                print(
                    f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ FloodWait (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {mg_id} -> {dest_chat_id}): {e}, —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥."
                )
                # –ë–µ—Ä—ë–º ¬´—è–∫–æ—Ä–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã fallback_copy –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                anchor_message = messages[0]
                await fallback_copy(client, anchor_message, dest_chat_id, prefix)
        except MessageIdInvalid:
            print(
                f"[MediaGroup] MESSAGE_ID_INVALID –¥–ª—è {mg_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
            )
        except Exception as e:
            print(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {mg_id} -> {dest_chat_id}: {e}, —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥."
            )
            anchor_message = messages[0]
            await fallback_copy(client, anchor_message, dest_chat_id, prefix)


async def forward_message(client: Client, message: Message, chat_info=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
    - –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–æ–º),
    - FloodWait,
    - fallback-–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ forward –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω),
    - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ FORWARDING_CONFIG.
    - –∑–∞–¥–µ—Ä–∂–∫–∏ 1-3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–Ω–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
    """
    from ..app import FORWARDING_CONFIG  # –í–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å –ø–µ—Ä–µ—Å—ã–ª–∫–∞–º–∏

    source_chat_id = message.chat.id
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {source_chat_id}")

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –∞ –Ω–µ Bot API)
    if message.from_user and message.from_user.id == client.me.id:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ {source_chat_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if source_chat_id not in FORWARDING_CONFIG:
        return

    # –î–ª—è fallback-–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    source_chat_info = ""
    if chat_info and source_chat_id in chat_info:
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, chat_info[123123] = {"username": "some_channel", "type": "channel"}
        if "username" in chat_info[source_chat_id]:
            source_chat_info = f"@{chat_info[source_chat_id]['username']}"
        elif "type" in chat_info[source_chat_id]:
            source_chat_info = f"{chat_info[source_chat_id]['type']} {source_chat_id}"

    if not source_chat_info:
        source_chat_info = f"–ß–∞—Ç {source_chat_id}"

    prefix = f"üì® –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑: {source_chat_info}\n\n"

    # –ï—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å media_group_id ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
    if message.media_group_id:
        mg_id = message.media_group_id

        # –ï—Å–ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –µ—â—ë –Ω–µ—Ç —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã - —Å–æ–∑–¥–∞—ë–º
        if mg_id not in media_groups_buffer:
            media_groups_buffer[mg_id] = {"messages": [], "task": None}

        media_groups_buffer[mg_id]["messages"].append(message)

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª—å–±–æ–º–∞, —Å–æ–∑–¥–∞—ë–º –µ—ë
        if media_groups_buffer[mg_id]["task"] is None:
            media_groups_buffer[mg_id]["task"] = asyncio.create_task(
                process_media_group_with_delay(
                    client=client,
                    mg_id=mg_id,
                    source_chat_id=source_chat_id,
                    prefix=prefix,
                )
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å—Ä–∞–∑—É, —Ç.–∫. –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á—É
        return

    # –ò–Ω–∞—á–µ ‚Äî –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ media_group_id). –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å—Ä–∞–∑—É –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
    dest_chat_ids = set(FORWARDING_CONFIG[source_chat_id])
    first_forwarded = False
    for dest_chat_id in dest_chat_ids:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 1-3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π
        if first_forwarded:
            delay_seconds = random.randint(1, 3)
            print(
                f"–û–∂–∏–¥–∞–Ω–∏–µ {delay_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {dest_chat_id}..."
            )
            await asyncio.sleep(delay_seconds)

        try:
            await message.forward(dest_chat_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {source_chat_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {dest_chat_id}")
            first_forwarded = True
        except FloodWait as fw:
            print(f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {fw.value} —Å–µ–∫—É–Ω–¥ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
            await asyncio.sleep(fw.value)
            try:
                await message.forward(dest_chat_id)
                print(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {source_chat_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {dest_chat_id} (–ø–æ—Å–ª–µ FloodWait)"
                )
                first_forwarded = True
            except Exception as e:
                print(
                    f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ FloodWait (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {e}, —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥"
                )
                await fallback_copy(client, message, dest_chat_id, prefix)
        except MessageIdInvalid:
            print(f"[Single] MESSAGE_ID_INVALID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}, —É–¥–∞–ª–µ–Ω–æ?")
        except Exception as e:
            print(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {dest_chat_id}: {e}, —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥"
            )
            await fallback_copy(client, message, dest_chat_id, prefix)


def create_forwarding_handler(chat_info_data):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö
    """

    async def handler(client, message):
        await forward_message(client, message, chat_info_data)

    return handler
