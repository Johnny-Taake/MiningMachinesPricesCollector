import asyncio
from datetime import datetime
from itertools import islice
import os
import re

import gspread
from pyrogram import filters
from pyrogram.types import InputMediaDocument
from pyrogram.client import Client
from pyrogram.types import Message
from pyrogram.errors import FloodWait
from pyrogram.raw import functions

from src.config import settings
from src.logger import logger as log
from src.pdf_processing import pdf_parser_main

from src.google_sheets import upload_collected_files_to_google_sheets


async def check_user_permission(client: Client, message: Message) -> bool:
    """Check if the user has permission to collect PDF files by looking for them in the "Admins Bot" folder."""
    try:
        if not message.from_user:
            return False
        user_id = message.from_user.id

        # 1. get a list of user filters (folders)
        filters = await client.invoke(functions.messages.GetDialogFilters())

        admin_folder = next(
            (
                f
                for f in filters
                if hasattr(f, "title")  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º default/pinned
                and f.title == settings.pdf_collector.admins_folder_name
            ),
            None,
        )
        if not admin_folder:
            print(f"–ü–∞–ø–∫–∞ ¬´{settings.pdf_collector.admins_folder_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # 2. check peers
        for p in admin_folder.include_peers:
            if getattr(p, "user_id", None) == user_id:
                return True
            if getattr(p, "chat_id", None) and (-p.chat_id) == user_id:
                return True
            if (
                getattr(p, "channel_id", None)
                and (-1000000000000 - p.channel_id) == user_id
            ):
                return True

        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return False

    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


async def download_pdf(client: Client, message: Message, save_dir: str) -> str | None:
    """
    Download a PDF file from a Telegram message and save it to a specified directory.
    Returns the path to the downloaded file or None if the download failed.
    """

    # Create directory if it doesn't exist
    os.makedirs(save_dir, exist_ok=True)

    # Form a file name
    chat_title = message.chat.title or str(message.chat.id)
    chat_title = re.sub(r"[^\w\-_\. ]", "_", chat_title)

    # Save the file under the chat name
    file_name = f"{chat_title}.pdf"
    file_path = os.path.join(save_dir, file_name)

    # Download the file
    await client.download_media(message, file_path)
    print(f"–°–∫–∞—á–∞–Ω PDF —Ñ–∞–π–ª: {file_path}")

    return file_path


async def collect_pdf_files(
    client: Client, chat_ids: list, collection_dir: str, limit: int = 100
):
    """
    Collect PDF files from specified chats and download them to collection directory.

    Args:
        client: Telegram client
        chat_ids: List of chat IDs to search in
        collection_dir: Directory to save collected files
        limit: Number of messages to check in each chat

    Returns:
        tuple: (collection_log, total_pdfs, chats_with_files, all_files)
    """
    collection_log = []
    total_pdfs = 0
    chats_with_files = 0
    all_files = []

    # Process each chat
    for chat_id in chat_ids:
        try:
            # Get chat information
            chat = await client.get_chat(chat_id)
            chat_name = chat.title or f"Chat {chat_id}"

            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞—Ç: {chat_name} (ID: {chat_id})")

            # Variable for storing the latest PDF
            latest_pdf = None
            latest_date = None

            # Get the last messages
            async for msg in client.get_chat_history(chat_id, limit=limit):
                # Check if there is a document (PDF)
                if msg.document and msg.document.file_name.endswith(".pdf"):
                    # Check if the file matches the name keywords
                    file_name_lower = msg.document.file_name.lower()
                    is_match = False
                    matching_keyword = ""

                    if chat_name in settings.pdf_collector.no_pdf_filename_check_chats:
                        is_match = True
                        matching_keyword = "No check"
                    else:
                        for keyword in settings.pdf_collector.pdf_filename_keywords:
                            if keyword.lower() in file_name_lower:
                                is_match = True
                                matching_keyword = keyword
                                break

                    if is_match:
                        print(
                            f"–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª: {msg.document.file_name} (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {matching_keyword})"
                        )
                        # If there is no latest PDF, or the current message is newer, update the latest PDF
                        if latest_date is None or msg.date > latest_date:
                            latest_pdf = msg
                            latest_date = msg.date
                            print(
                                f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {msg.document.file_name} –æ—Ç {msg.date}"
                            )

            # Download the latest PDF if found
            if latest_pdf:
                print(
                    f"–°–∫–∞—á–∏–≤–∞—é —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –∏–∑ —á–∞—Ç–∞ {chat_name}: {latest_pdf.document.file_name}"
                )
                file_path = await download_pdf(client, latest_pdf, collection_dir)
                if file_path:
                    pdf_info = {
                        "file_path": file_path,
                        "file_name": latest_pdf.document.file_name,
                        "date": latest_pdf.date.strftime("%Y-%m-%d %H:%M:%S"),
                        "from_user": (
                            latest_pdf.from_user.first_name
                            if latest_pdf.from_user
                            else "Unknown"
                        ),
                    }
                    collection_log.append(
                        {
                            "chat_name": chat_name,
                            "chat_id": chat_id,
                            "files_count": 1,
                            "files": [pdf_info],
                        }
                    )
                    all_files.append(file_path)
                    total_pdfs += 1
                    chats_with_files += 1
                    print(f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª –∏–∑ —á–∞—Ç–∞ {chat_name}: {file_path}")
            else:
                print(f"–í —á–∞—Ç–µ {chat_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö PDF —Ñ–∞–π–ª–æ–≤")

        except FloodWait as fw:
            print(f"‚ö†Ô∏è FloodWait –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: –∂–¥—ë–º {fw.value} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(fw.value)
        except Exception as e:
            log.exception(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: {e}")
            collection_log.append(
                {"chat_name": f"Chat {chat_id}", "chat_id": chat_id, "error": str(e)}
            )

    return collection_log, total_pdfs, chats_with_files, all_files


async def collect_handler(client: Client, message: Message, limit: int = 100):
    """
    Process the 'collect' command: finds the latest PDF file with keywords in each chat from the "Collect Bot" folder
    """
    # Check if the sender of the command has permission to collect files
    if not await check_user_permission(client, message):
        await message.reply(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )
        return

    # Create a directory for the current collection
    now = datetime.now().strftime("%Y%m%d_%H%M%S")
    collection_dir = os.path.join(
        settings.pdf_collector.get_pdf_save_dir(settings.base_data_dir),
        f"collection_{now}",
    )
    os.makedirs(collection_dir, exist_ok=True)

    # Send a message to indicate that the collection is starting
    status_message = await message.reply(
        "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö PDF —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç–∞—Ö –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞..."
    )

    # Get a list of chats for the search from the "Collect Bot" folder
    chat_ids = []
    try:
        # Find the folder with chats for the collection
        filters = await client.invoke(functions.messages.GetDialogFilters())

        collect_folder = next(
            (
                f
                for f in filters
                if hasattr(f, "title")
                and f.title == settings.pdf_collector.collect_folder_name
            ),
            None,
        )

        if not collect_folder:
            await status_message.edit(
                f"‚ùå –ü–∞–ø–∫–∞ ¬´{settings.pdf_collector.collect_folder_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                f"–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{settings.pdf_collector.collect_folder_name}¬ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ—ë —á–∞—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ PDF."
            )
            return

        # Get IDs of chats from the folder
        for peer in collect_folder.include_peers:
            chat_id = None

            if hasattr(peer, "channel_id"):
                chat_id = -1000000000000 - peer.channel_id
            elif hasattr(peer, "chat_id"):
                chat_id = -peer.chat_id
            elif hasattr(peer, "user_id"):
                chat_id = peer.user_id

            if chat_id:
                chat_ids.append(chat_id)

        if not chat_ids:
            await status_message.edit(
                f"‚ùå –ü–∞–ø–∫–∞ ¬´{settings.pdf_collector.collect_folder_name}¬ª –ø—É—Å—Ç–∞. "
                f"–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã –≤ –ø–∞–ø–∫—É ¬´{settings.pdf_collector.collect_folder_name}¬ª –¥–ª—è —Å–±–æ—Ä–∞ PDF."
            )
            return

        print(
            f"–ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} —á–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ '{settings.pdf_collector.collect_folder_name}': {chat_ids}"
        )
        await status_message.edit(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} —á–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ –¥–ª—è —Å–±–æ—Ä–∞")

    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {e}")
        await status_message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {e}")
        return

    # Collect PDF files using the dedicated function
    await status_message.edit("üîç –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤...")

    try:
        collection_log, total_pdfs, chats_with_files, all_files = (
            await collect_pdf_files(client, chat_ids, collection_dir, limit)
        )
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ PDF —Ñ–∞–π–ª–æ–≤: {e}")
        await status_message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ PDF —Ñ–∞–π–ª–æ–≤: {e}")
        return

    # Save the report
    report_path = os.path.join(collection_dir, "collection_report.txt")
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(f"–û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–µ PDF —Ñ–∞–π–ª–æ–≤ –æ—Ç {now}\n")
        f.write(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_pdfs}\n")
        f.write(f"–ß–∞—Ç–æ–≤ —Å —Ñ–∞–π–ª–∞–º–∏: {chats_with_files} –∏–∑ {len(chat_ids)}\n\n")

        for chat_log in collection_log:
            f.write(f"== –ß–∞—Ç: {chat_log['chat_name']} (ID: {chat_log['chat_id']}) ==\n")

            if "error" in chat_log:
                f.write(f"  –û—à–∏–±–∫–∞: {chat_log['error']}\n")
                continue

            f.write(f"  –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {chat_log['files_count']}\n")
            for i, file in enumerate(chat_log.get("files", []), 1):
                f.write(f"  {i}. {file['file_name']}\n")
                f.write(f"     –î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {file['date']}\n")
                f.write(f"     –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {file['from_user']}\n")
                f.write(f"     –ü—É—Ç—å: {file['file_path']}\n")
            f.write("\n")

    # Send the report
    if total_pdfs > 0:
        result_message = (
            f"üìä –°–±–æ—Ä PDF —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_pdfs}\n"
            f"–ß–∞—Ç–æ–≤ —Å —Ñ–∞–π–ª–∞–º–∏: {chats_with_files} –∏–∑ {len(chat_ids)}"
        )
    else:
        result_message = (
            f"üìä –°–±–æ—Ä PDF —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–∞—Ö.\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {len(chat_ids)}"
        )

    await status_message.edit(result_message)

    # Send all collected files in batches
    if all_files:
        CHUNK = 5
        it = iter(all_files)
        batch = list(islice(it, CHUNK))
        while batch:
            media_group = [InputMediaDocument(file_path) for file_path in batch]
            await client.send_media_group(chat_id=message.chat.id, media=media_group)
            batch = list(islice(it, CHUNK))

    status_message = await message.reply("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF —Ñ–∞–π–ª–æ–≤...")

    # Process the collected PDFs
    pdf_parser_main()

    await status_message.edit("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ PDF —Ñ–∞–π–ª–æ–≤. ")

    await status_message.edit("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ Uminers...")

    from src.parser.uminers.scarper import UminersScraper

    # Run the Uminers WebScraper
    uminers_scraper = UminersScraper(settings.uminers_scraper.url_to_scrape)
    uminers_scraper.run()

    await status_message.edit("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...")

    # Upload collected files to Google Sheets
    try:
        link = upload_collected_files_to_google_sheets()
        await status_message.edit(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets: {link}")
    except gspread.exceptions.APIError as e:
        if e.response.status_code == 403 and "sharing quota" in str(e):
            print(
                "‚ö†Ô∏è  –ö–≤–æ—Ç–∞ SharingQuota –∏—Å—á–µ—Ä–ø–∞–Ω–∞ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤ Google Sheets"
            )

            await status_message.edit(
                "‚ö†Ô∏è  –ö–≤–æ—Ç–∞ SharingQuota –∏—Å—á–µ—Ä–ø–∞–Ω–∞ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤ Google Sheets"
            )
        else:
            await status_message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google Sheets")
            raise
    except Exception as e:
        await status_message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google Sheets: {e}")
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google Sheets: {e}")
        raise


def register_pdf_collector_handlers(app: Client):
    """
    Register handlers for the 'collect' command for PDF collection.
    """

    @app.on_message(
        filters.command(["—Å–±–æ—Ä", "collect"]) & (filters.group | filters.private)
    )
    async def pdf_collect_command(client, message):
        await collect_handler(client, message)
