import asyncio
from datetime import datetime
import os

import gspread

from pyrogram.client import Client

from pyrogram.raw import functions

from src.config import settings
from src.logger import logger as log
from src.pdf_processing import pdf_parser_main
from src.parser.uminers import UminersScraper
from src.google_sheets import upload_collected_files_to_google_sheets
from src.telegram.handlers import collect_pdf_files


async def collect_data_to_google_sheets_cron_job(client: Client, limit: int = 100):
    """
    Cron job version: finds the latest PDF file with keywords in each chat from the "Collect Bot" folder
    without user interaction. Designed to run automatically.
    """
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ PDF —Ñ–∞–π–ª–æ–≤...")

    # Create a directory for the current collection
    now = datetime.now().strftime("%Y%m%d_%H%M%S")
    collection_dir = os.path.join(
        settings.pdf_collector.get_pdf_save_dir(settings.base_data_dir),
        f"collection_{now}",
    )
    os.makedirs(collection_dir, exist_ok=True)

    # Get a list of chats for the search from the "Collect Bot" folder
    chat_ids = []
    try:
        print("üîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ PDF...")

        # Find the folder with chats for the collection
        filters = await client.invoke(functions.messages.GetDialogFilters())

        collect_folder = next(
            (
                f
                for f in filters
                if hasattr(f, "title")
                and f.title == settings.pdf_collector.collect_folder_name
            ),
            None,
        )

        if not collect_folder:
            error_msg = (
                f"‚ùå –ü–∞–ø–∫–∞ ¬´{settings.pdf_collector.collect_folder_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            log.error(error_msg)
            return False

        # Get IDs of chats from the folder
        for peer in collect_folder.include_peers:
            chat_id = None

            if hasattr(peer, "channel_id"):
                chat_id = -1000000000000 - peer.channel_id
            elif hasattr(peer, "chat_id"):
                chat_id = -peer.chat_id
            elif hasattr(peer, "user_id"):
                chat_id = peer.user_id

            if chat_id:
                chat_ids.append(chat_id)

        if not chat_ids:
            error_msg = (
                f"‚ùå –ü–∞–ø–∫–∞ ¬´{settings.pdf_collector.collect_folder_name}¬ª –ø—É—Å—Ç–∞."
            )
            log.error(error_msg)
            return False

        print(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} —á–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ '{settings.pdf_collector.collect_folder_name}': {chat_ids}"
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {e}"
        log.exception(error_msg)
        return False

    # Collect PDF files using the dedicated function
    print("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤...")

    try:
        collection_log, total_pdfs, chats_with_files, all_files = (
            await collect_pdf_files(client, chat_ids, collection_dir, limit)
        )
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ PDF —Ñ–∞–π–ª–æ–≤: {e}"
        log.exception(error_msg)
        return False

    # Save the report
    report_path = os.path.join(collection_dir, "collection_report.txt")
    try:
        with open(report_path, "w", encoding="utf-8") as f:
            f.write(f"–û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–µ PDF —Ñ–∞–π–ª–æ–≤ –æ—Ç {now}\n")
            f.write(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_pdfs}\n")
            f.write(f"–ß–∞—Ç–æ–≤ —Å —Ñ–∞–π–ª–∞–º–∏: {chats_with_files} –∏–∑ {len(chat_ids)}\n\n")

            for chat_log in collection_log:
                f.write(
                    f"== –ß–∞—Ç: {chat_log['chat_name']} (ID: {chat_log['chat_id']}) ==\n"
                )

                if "error" in chat_log:
                    f.write(f"  –û—à–∏–±–∫–∞: {chat_log['error']}\n")
                    continue

                f.write(f"  –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {chat_log['files_count']}\n")
                for i, file in enumerate(chat_log.get("files", []), 1):
                    f.write(f"  {i}. {file['file_name']}\n")
                    f.write(f"     –î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {file['date']}\n")
                    f.write(f"     –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {file['from_user']}\n")
                    f.write(f"     –ü—É—Ç—å: {file['file_path']}\n")
                f.write("\n")

        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
        log.exception(error_msg)

    # Log the collection results
    if total_pdfs > 0:
        result_message = (
            f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä PDF —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_pdfs}\n"
            f"–ß–∞—Ç–æ–≤ —Å —Ñ–∞–π–ª–∞–º–∏: {chats_with_files} –∏–∑ {len(chat_ids)}\n"
            f"–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {collection_dir}"
        )
    else:
        result_message = (
            f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä PDF —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–∞—Ö.\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {len(chat_ids)}"
        )

    print(result_message)

    # Process collected files only if we have any
    if total_pdfs > 0:
        print("‚öôÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF —Ñ–∞–π–ª–æ–≤...")

        try:
            # Process the collected PDFs with pdf_parser_main
            pdf_parser_main()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ PDF —Ñ–∞–π–ª–æ–≤.")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF: {e}"
            log.exception(error_msg)

        print("üåê –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ Uminers...")

        try:
            # Run the Uminers WebScraper
            uminers_scraper = UminersScraper(settings.uminers_scraper.url_to_scrape)
            uminers_scraper.run()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ Uminers —Å–æ–±—Ä–∞–Ω—ã.")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —Å Uminers: {e}"
            log.exception(error_msg)

        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...")

        try:
            # Upload collected files to Google Sheets
            link = upload_collected_files_to_google_sheets()
            success_msg = f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets: {link}"
            print(success_msg)
        except gspread.exceptions.APIError as e:
            if e.response.status_code == 403 and "sharing quota" in str(e):
                warning_msg = (
                    "–ö–≤–æ—Ç–∞ SharingQuota –∏—Å—á–µ—Ä–ø–∞–Ω–∞ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤ Google Sheets"
                )
                log.warning(warning_msg)
            else:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google Sheets: {e}"
                log.exception(error_msg)
                raise
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google Sheets: {e}"
            log.exception(error_msg)
    else:
        print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã.")

    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return True


async def safe_data_collection_wrapper():
    start_time = datetime.now()
    print(f"ü§ñ –ó–∞–ø—É—â–µ–Ω —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}")
    try:
        from src.telegram.client import app

        success = await asyncio.wait_for(
            collect_data_to_google_sheets_cron_job(app), timeout=600
        )
        return success
    except asyncio.TimeoutError:
        duration = datetime.now() - start_time
        log.error(
            f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (10 –º–∏–Ω) –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ {duration.total_seconds():.2f} —Å–µ–∫—É–Ω–¥"
        )
        return False
    except Exception as e:
        duration = datetime.now() - start_time
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cron job: {e}"
        log.exception(f"{error_msg} –ø–æ—Å–ª–µ {duration.total_seconds():.2f} —Å–µ–∫—É–Ω–¥: {e}")
        return False
